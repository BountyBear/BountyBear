#  ██████  ██████  ██████  ███████ ██████      ██████  ██    ██     ███    ███  █████  ███    ██ ██  █████   ██████      █████  ███    ██ ██████      ██████   ██████  ██    ██ ███    ██ ████████ ██    ██ ██████  ███████  █████  ██████  
# ██      ██    ██ ██   ██ ██      ██   ██     ██   ██  ██  ██      ████  ████ ██   ██ ████   ██ ██ ██   ██ ██          ██   ██ ████   ██ ██   ██     ██   ██ ██    ██ ██    ██ ████   ██    ██     ██  ██  ██   ██ ██      ██   ██ ██   ██ 
# ██      ██    ██ ██   ██ █████   ██   ██     ██████    ████       ██ ████ ██ ███████ ██ ██  ██ ██ ███████ ██          ███████ ██ ██  ██ ██   ██     ██████  ██    ██ ██    ██ ██ ██  ██    ██      ████   ██████  █████   ███████ ██████  
# ██      ██    ██ ██   ██ ██      ██   ██     ██   ██    ██        ██  ██  ██ ██   ██ ██  ██ ██ ██ ██   ██ ██          ██   ██ ██  ██ ██ ██   ██     ██   ██ ██    ██ ██    ██ ██  ██ ██    ██       ██    ██   ██ ██      ██   ██ ██   ██ 
#  ██████  ██████  ██████  ███████ ██████      ██████     ██        ██      ██ ██   ██ ██   ████ ██ ██   ██  ██████     ██   ██ ██   ████ ██████      ██████   ██████   ██████  ██   ████    ██       ██    ██████  ███████ ██   ██ ██   ██ ˜
# Maniac Gets More Credit
# ----------------------------------
# Before Editing Don't Delete This Part

on load:
    set {-mark.shard} to echo shard named "&4&lʙʟᴏᴏᴅ ᴍᴀʀᴋ" with lore "&7Right-Click to gain &f&l+1 &c&lᴍᴀʀᴋ"
    register new shaped recipe for {-mark.shard} using netherite ingot, diamond block, netherite ingot, diamond block, redstone block, diamond block, netherite ingot, diamond block, netherite ingot with id "mark"
    set {-mark.reroll} to red dye named "&5&lShadow Reroll Item" with lore "&7Right-Click To Gain a Random &5&lShadow Ability"
    register new shaped recipe for {-mark.reroll} using diamond block, diamond block, diamond block, diamond block, wither skeleton skull, diamond block, diamond block, diamond block, diamond block with id "reroll"
    set {-mak.revive} to purple dye named "&d&lRevival Item" with lore "&b&lUse /revive <bannedplayer> to &5&lRevive"
    register new shaped recipe for {-mak.revive} using diamond block, diamond block, netherite ingot, diamond block, wither skeleton skull, diamond block, diamond block, netherite ingot, diamond block with id "revive"

on right click:
    if 1 of event-item is {-mark.reroll}:
        if {Shadow.ability.set::%player's uuid%} is true:
            set {_random_selected} to random integer between 1 and 3
            set {shadowselected::%player's uuid%} to {_random_selected}
            if {_random_selected} is 1:
                send "&b You Got &5&lShadow Swap Ability" to player
                remove 1 of {-mark.reroll} from player's inventory
            if {_random_selected} is 2:
                send "&b You Got &5&l Shadow Step Ability" to player
                remove 1 of {-mark.reroll} from player's inventory
            if {_random_selected} is 3:
                send "&b You Got &5&l Shadow Purge Ability" to player
                remove 1 of {-mark.reroll} from player's inventory
        else:
            send "&c You Need 7 Marks For a Single Ability" to player


            


on join:
    if {mark::%player's uuid%} is not set:
        set {mark::%player's uuid%} to 1
    execute console command "/recipe give %player% minecraft:mark"
    execute console command "/recipe give %player% minecraft:reroll"
    set {purge::%player's uuid%} to false
    set {shadow.swap.cooldown::%player's uuid%} to 5
    set {shadow.step.cooldown::%player's uuid%} to 5
    set {shadow.purge.cooldown::%player's uuid%} to 5
    set {time.heal.cooldown::%player's uuid%} to 5


# For Smp Starting
command /start:
    permission: op
    trigger:
        loop all players:
            apply weakness 1 to loop-player for 5 minutes
            send title "&4&lɢʀᴀᴄᴇ ʜᴀꜱ ʙᴇɢᴜɴ" with subtitle "&b5 &b&lᴍɪɴᴜᴛᴇꜱ"
            wait 300 seconds
            send title "&4&lɢʀᴀᴄᴇ ɪꜱ ᴏᴠᴇʀ"
            remove weakness from loop-players

# Effects / Actionbar
every 0.5 seconds:
    applyeffects()
    actionbar()

# Shadow Ability Cooldown
every 1 second:
    loop all players:
        if {shadow.swap.cooldown::%loop-player's uuid%} > 0:
            remove 1 from {shadow.swap.cooldown::%loop-player's uuid%}
        if {shadow.step.cooldown::%loop-player's uuid%} > 0:
            remove 1 from {shadow.step.cooldown::%loop-player's uuid%}
        if {time.heal.cooldown::%loop-player's uuid%} > 0:
            remove 1 from {time.heal.cooldown::%loop-player's uuid%}
        if {shadow.purge.cooldown::%loop-player's uuid%} > 0:
            remove 1 from {shadow.purge.cooldown::%loop-player's uuid%}
        if {shadow.step.cooldown::%loop-player's uuid%} is 0:
            set {shadow.step.cooldown::%loop-player's uuid%} to "&bReady!"
        if {shadow.swap.cooldown::%loop-player's uuid%} is 0:
            set {shadow.swap.cooldown::%loop-player's uuid%} to "&bReady!"
        if {time.heal.cooldown::%loop-player's uuid%} is 0:
            set {time.heal.cooldown::%loop-player's uuid%} to "&bReady!"
        if {shadow.purge.cooldown::%loop-player's uuid%} is 0:
            set {shadow.purge.cooldown::%loop-player's uuid%} to "&bReady!"


# ActionBar For Abilites
function applyeffects():
    loop all players:
        if {mark::%loop-player's uuid%} is 2 or 3:
            apply speed without any particles to loop-player for 2 seconds replacing the existing effect
        if {mark::%loop-player's uuid%} is 4 or 5: 
            apply speed without any particles to loop-player for 2 seconds replacing the existing effect
            apply strength without any particles to loop-player for 2 seconds replacing the existing effect
        if {mark::%loop-player's uuid%} is 6: 
            apply speed without any particles to loop-player for 2 seconds replacing the existing effect
            apply strength without any particles to loop-player for 2 seconds replacing the existing effect
            apply resistance without any particles to loop-player for 2 seconds replacing the existing effect
        if {mark::%loop-player's uuid%} is 7 or 8: 
            apply speed 2 without any particles to loop-player for 2 seconds replacing the existing effect
            apply strength 2 without any particles to loop-player for 2 seconds replacing the existing effect
            apply resistance without any particles to loop-player for 2 seconds replacing the existing effect
            apply glowing without any particles to loop-player for 2 seconds replacing the existing effect 

# Actionbar
function actionbar():
    loop all players:
        if {Shadow.ability.set::%loop-player's uuid%} is true:
            if {mark::%loop-player's uuid%} is 7:
                if {shadowselected::%loop-player's uuid%} is 1:
                    send action bar "&5&lShadow Swap &7>> &b%{shadow.swap.cooldown::%loop-player's uuid%}% " to loop-player
                if {shadowselected::%loop-player's uuid%} is 2:
                    send action bar " &5&lShadow Step &7>> &b%{shadow.swap.cooldown::%loop-player's uuid%}% " to loop-player
                if {shadowselected::%loop-player's uuid%} is 3:
                    send action bar "&5&lShadow Purge &7>> &b%{shadow.purge.cooldown::%loop-player's uuid%}% " to loop-player
            if {mark::%loop-player's uuid%} is 8:
                if {shadowselected::%loop-player's uuid%} is 1:
                    if {time.heal.%loop-player's uuid%} is not set:
                        send action bar " &5&lShadow Swap &7>> &b%{shadow.swap.cooldown::%loop-player's uuid%}% &f| &4Time Heal &7>> &b%{time.heal.cooldown::%loop-player's uuid%}%" to loop-player
                    else:
                        send action bar " &5&lShadow Swap &7>> &b%{shadow.swap.cooldown::%loop-player's uuid%}% &f| &4Time Heal &7>> &b%{time.heal.%loop-player's uuid%}%" to loop-player
                if {shadowselected::%loop-player's uuid%} is 2:
                    if {time.heal.%loop-player's uuid%} is not set:
                        send action bar "&5&lShadow Step &7>> &b%{shadow.step.cooldown::%loop-player's uuid%}% &f| &4Time Heal &7>> &b%{time.heal.cooldown::%loop-player's uuid%}%" to loop-player
                    else:
                        send action bar "&5&lShadow Step &7>> &b%{shadow.step.cooldown::%loop-player's uuid%}% &f| &4Time Heal &7>> &b%{time.heal.%loop-player's uuid%}%" to loop-player
                if {shadowselected::%loop-player's uuid%} is 3:
                    if {time.heal.%loop-player's uuid%} is not set:
                        send action bar "&5&lShadow Purge &7>> &b%{shadow.purge.cooldown::%loop-player's uuid%}% &f| &4Time Heal &7>> &b%{time.heal.cooldown::%loop-player's uuid%}%" to loop-player
                    else:
                        send action bar "&5&lShadow Purge &7>> &b%{shadow.purge.cooldown::%loop-player's uuid%}% &f| &4Time Heal &7>> &b%{time.heal.%loop-player's uuid%}%" to loop-player

on heal:
    if {purge.%player's uuid%} is true:
        cancel event




# Shadow Step
function StepCircle(s: number, p: location):
	set {_pl} to location of {_p}
	set {_step} to 1 # Set a larger step value here
	set {_iterations} to 360 * {_s} / {_step}
	loop {_iterations} times:
		set {_angle} to loop-value * {_step}
		set {_v} to spherical vector radius {_s}, yaw {_angle}, pitch (0)
		make 10 of dust using dustOption(rgb(255, 255, 255), 1) at {_pl} ~ {_v}
		draw 1 of smoke at {_pl} ~ {_v} with extra 0 with force

# Timeheal
function Timeheal(s: number, p: location):
	set {_pl} to location of {_p}
	set {_step} to 1 # Set a larger step value here
	set {_iterations} to 360 * {_s} / {_step}
	loop {_iterations} times:
		set {_angle} to loop-value * {_step}
		set {_v} to spherical vector radius {_s}, yaw {_angle}, pitch (0)
		make 10 of dust using dustOption(rgb(126, 18, 18), 1) at {_pl} ~ {_v}
		draw 1 of smoke at {_pl} ~ {_v} with extra 0 with force

# Shadow Abilities
command /shadow:
    trigger:
        if {Shadow.ability.set::%player's uuid%} is true:
            if {shadowselected::%player's uuid%} is 1:
                if {shadow.swap.cooldown::%player's uuid%} is "&bReady!":
                    target entity is set:
                        set {_s1} to location of player
                        set {_s2} to location of target entity
                        teleport target player to {_s1}
                        teleport player to {_s2}
                        set {_s1} to location 1 block above location of player
                        set {_s2} to location 1 block above location of target entity
                        SwapCircle(1.5, {_s1})
                        SwapCircle(1.5, {_s2})
                        set {shadow.swap.cooldown::%player's uuid%} to 45
            if {shadowselected::%player's uuid%} is 2:
                if {shadow.step.cooldown::%player's uuid%} is "&bReady!":
                    target entity is set:
                        teleport player behind target entity
                        set {s} to location 1 block above player
                        set {s} to location 1 block above target entity
                        apply blindness 1 to target entity for 5 seconds replacing the existing effect
                        apply strength 3 to player for 5 seconds replacing the existing effect
                        apply speed 3 to player for 5 seconds replacing the existing effect
                        StepCircle(1, {s})
                        StepCircle(1, {s2})
                        set {shadow.step.cooldown::%player's uuid%} to 45
            if {shadowselected::%player's uuid%} is 3:
                if {shadow.purge.cooldown::%player's uuid%} is "&bReady!":
                    target player is set:
                        set {shadow.purge.cooldown::%player's uuid%} to 45
                        set {purge::%target's uuid%} to true
                        wait 5 seconds
                        set {purge::%target's uuid%} to false

# Time Heal 
command /timeheal:
    trigger:
        if {time.ability.set::%player's uuid%} is true:
            if {time.heal.cooldown::%uuid of player%} is "&bReady!":
                if {time.heal.%player's uuid%} is not set:
                    set {time.heal.%player's uuid%} to player's health
                else if {time.heal.%player's uuid%} is set:
                    set player's health to {time.heal.%player's uuid%}
                    clear {time.heal.%player's uuid%}
                    set {time.heal.cooldown::%uuid of player%} to 45
                    set {s} to location 1 block above player
                    Timeheal(1, {s})


# Set Ability
command /setshadow [<number>]:
    permission: op
    trigger:
        set {Shadow.ability.set::%player's uuid%} to true
        set {shadowselected::%player's uuid%} to arg-1

# Shadow Swap Circle
function SwapCircle(s: number, p: location):
	set {_pl} to location of {_p}
	set {_step} to 1 # Set a larger step value here
	set {_iterations} to 360 * {_s} / {_step}
	loop {_iterations} times:
		set {_angle} to loop-value * {_step}
		set {_v} to spherical vector radius {_s}, yaw {_angle}, pitch (0)
		make 12 of dust using dustOption(rgb(160, 31, 255), 1) at {_pl} ~ {_v}




# Mark Perks
command /marklevel:
    trigger:
        send "&4&lMark 1: " to sender
        send " " to sender
        send "&4&lMark 2: Speed 1 " to sender
        send " " to sender
        send "&4&lMark 3: Speed 1 " to sender
        send " " to sender
        send "&4&lMark 4: Speed 1 + Strength 1 " to sender
        send " " to sender
        send "&4&lMark 5: Speed 1 + Strength 1" to sender
        send " " to sender
        send "&4&lMark 6: Speed 1 + Strength 1 + Resistance 1" to sender
        send " " to sender
        send "&4&lMark 7: Speed 2 + Strength 1 + Resistance 1 + Glowing + Coords Leak Every 2 Hours + Shadow Ability " to sender
        send " " to sender
        send "&4&lMark 8: Speed 2 + Strength 2 + Resistance 1 + Glowing + Coords Leak Every 1 Hour + Shadow Ability + Time Heal" to sender
        send " " to sender

# Give Mark Item
command /markgive:
    permission: op
    trigger:
        give player 1 of {-mark.shard}

# reroll item
command /rerollgive:
    permission: op
    trigger:
        give player 1 of {-mark.reroll}

# revival item
command /revivalitem:
    permission: op
    trigger:
        give player 1 of {-mak.revive}

# Death By Mob
on death:
    if victim is a player:
        if attacker is not a player:
            if {mark::%victim's uuid%} > 1:
                set {mark::%victim's uuid%} to 1
                set {Shadow.ability.set::%victim's uuid%} to false
                set {time.ability.set::%victim's uuid%} to false
                send "&bYou died, and your &c&lᴍᴀʀᴋꜱ &b Have Been &4Reset" to victim
            if {mark::%victim's uuid%} < 1:
                remove 1 from {mark::%victim's uuid%}
                set {Shadow.ability.set::%victim's uuid%} to false
                set {time.ability.set::%victim's uuid%} to false
                send "&bYou died, and you are on &4%{mark::%victim's uuid%}% &c&lᴍᴀʀᴋꜱ" to victim
            if {mark::%victim's uuid%} is 1:
                remove 1 from {mark::%victim's uuid%}
                set {Shadow.ability.set::%victim's uuid%} to false
                set {time.ability.set::%victim's uuid%} to false
                send "&bYou died, and you are on &4%{mark::%victim's uuid%}% &c&lᴍᴀʀᴋꜱ" to victim
            

# Particles
every 1 second:
    loop all players:
        if {mark::%loop-player's uuid%} is 7 or 8:
            draw 16 of dust using dustOption(rgb(255, 0, 0), 1) at location 1 block above loop-player with offset vector(0.4 ,0.4 ,0.4) with extra 0 with force

# Particles 2
every 1 second:
    loop all players:
        if {mark::%loop-player's uuid%} is 8:
            draw 16 of enchant at location 1 block above loop-player with offset vector(0.4 ,0.4 ,0.4) with extra 0 with force

# Death System By Player
on death:
    if victim is a player:
        if attacker is a player:
            if {mark::%victim's uuid%} is  2 or 3 or 4:
                set {mark::%victim's uuid%} to 1
                drop 1 of {-mark.shard} at victim
                set {Shadow.ability.set::%victim's uuid%} to false
                send "&bYou died, and your &c&lᴍᴀʀᴋꜱ &bHave Been &4Reset" to victim
            if {mark::%victim's uuid%} is 1:
                remove 1 from {mark::%victim's uuid%}
                drop 1 of {-mark.shard} at victim
                set {Shadow.ability.set::%victim's uuid%} to false
                set {time.ability.set::%victim's uuid%} to false
                send "&bYou died, and you are on &4%{mark::%victim's uuid%}% &c&lᴍᴀʀᴋꜱ" to victim
            if {mark::%victim's uuid%} < 1:
                remove 1 from {mark::%victim's uuid%}
                drop 1 of {-mark.shard} at victim
                set {Shadow.ability.set::%victim's uuid%} to false
                set {time.ability.set::%victim's uuid%} to false
                send "&bYou died, and you are on &4%{mark::%victim's uuid%}% &c&lᴍᴀʀᴋꜱ" to victim
            if {mark::%victim's uuid%} is 5 or 6:
                set {mark::%victim's uuid%} to 1
                set {Shadow.ability.set::%victim's uuid%} to false
                send "&bYou died, and your &c&lᴍᴀʀᴋꜱ &bHave Been &4Reset" to victim
                drop 2 of {-mark.shard} at victim
                set {mark::%victim's uuid%} to 1
                set {Shadow.ability.set::%victim's uuid%} to false
            if {mark::%victim's uuid%} is 8:
                send "&bYou died, and your &c&lᴍᴀʀᴋꜱ &bHave Been &4Reset" to victim
                drop 3 of {-mark.shard} at victim
                set {mark::%victim's uuid%} to 1
            if {mark::%victim's uuid%} > 8:
                send "&bYou died, and your &c&lᴍᴀʀᴋꜱ &bHave Been &4Reset" to victim
                drop 3 of {-mark.shard} at victim
                set {mark::%victim's uuid%} to 1
                set {Shadow.ability.set::%victim's uuid%} to false
                set {time.ability.set::%victim's uuid%} to false
            if {mark::%victim's uuid%} is 7:
                send "&bYou died, and your &c&lᴍᴀʀᴋꜱ &bHave Been &4Reset" to victim
                drop 2 of {-mark.shard} at victim
                set {mark::%victim's uuid%} to 1
                set {Shadow.ability.set::%victim's uuid%} to false
                set {time.ability.set::%victim's uuid%} to false
                if {mark::%victim's uuid%} < 1:
                    remove 1 from {mark::%victim's uuid%}
                    send "&bYou died, and you are on &4%{mark::%victim's uuid%}% &c&lᴍᴀʀᴋꜱ" to victim

command /marks:
    trigger:
        send "&b You Currently Have &c%{mark::%player's uuid%}% Marks" to player


command /setmark <text> <text>:
    permission: op
    trigger:
        set {_s} to arg-1 parsed as player
        set {mark::%{_s}'s uuid%} to arg-2
        send "&bSet &c&lᴍᴀʀᴋ &bFor &a%{_s}% &bTo &c%arg-2%" to sender
        play sound "entity.player.levelup" with volume 10 with pitch 2 to {_s}
        send "&b Your &cMark(s) &bHave been Set to &4%arg-2%" to {_s}

on tab complete for "/setmark":
    set tab completion for position 1 to all players
    set tab completion for position 2 to 1, 2, 3, 4, 5, 6, 7, 8

# Location Leak 
every 2 hours:
    loop all players:
        if {mark::%loop-player's uuid%} is 7:
            set {_tracked} to loop-player
            send title "&4&l%{_tracked}%'s Coords are" with Subtitle "&bx:%x-coords of {_tracked}% ,%z-coords of {_tracked}%" to all players
            broadcast "&4&l%{_tracked}%'s Coords are &bx:%x-coords of {_tracked}% ,%z-coords of {_tracked}%"
# Location Leak 2
every 1 hour:
    loop all players:
        if {mark::%loop-player's uuid%} is 8:
            set {_tracked} to loop-player
            send title "&4&l%{_tracked}%'s Coords are" with Subtitle "&bx:%x-coords of {_tracked}% ,%z-coords of {_tracked}%" to all players
            broadcast "&4&l%{_tracked}%'s Coords are &bx:%x-coords of {_tracked}% ,%z-coords of {_tracked}%"


# Top Marks
command /Marktop:
	trigger:
		broadcast "& of all online players:"
		loop all players:
			if {mark::%loop-player's uuid%} is not set:
				set {mark::%loop-player's uuid%} to 1
			broadcast "&e%loop-player%: &c&l%{mark::%loop-player's uuid%}%"


# Shard Use
on right click:
    if 1 of event-item is {-mark.shard}:
        if {mark::%player's uuid%} is 7:
            remove 1 of {-mark.shard} from player's inventory
            add 1 to {mark::%player's uuid%}
            send "&4&lʙʟᴏᴏᴅ ᴍᴀʀᴋ &babsorbed, now you have &c%{mark::%player's uuid%}% Marks" to player
            set {Shadow.ability.set::%player's uuid%} to true
            set {time.ability.set::%player's uuid%} to true
            set {shadowselected::%player's uuid%} to 1
        if {mark::%player's uuid%} is 8:
            set {time.ability.set::%player's uuid%} to true
            set {Shadow.ability.set::%player's uuid%} to true
            send "&4&lʙʟᴏᴏᴅ ᴍᴀʀᴋ &babsorbed, now you have &c%{mark::%player's uuid%}% Marks" to player

# Shard use 2
on right click:
    if 1 of event-item is {-mark.shard}:
        if {mark::%player's uuid%} < 6:
            remove 1 of {-mark.shard} from player's inventory
            add 1 to {mark::%player's uuid%}
            send "&4&lʙʟᴏᴏᴅ ᴍᴀʀᴋ &babsorbed, now you have &c%{mark::%player's uuid%}% Marks" to player
            play sound "entity.player.levelup" with volume 10 with pitch 2 to player
        if {mark::%player's uuid%} is 8:
            send "&bYou already have the maximum amount of &c&lMarks" to player
            play sound "block.note_block.bass" with volume 20 and pitch 2 to player
        if {mark::%player's uuid%} is 6:
            remove 1 of {-mark.shard} from player's inventory
            add 1 to {mark::%player's uuid%}
            send "&4&lʙʟᴏᴏᴅ ᴍᴀʀᴋ &babsorbed, now you have &c%{mark::%player's uuid%}% Marks" to player
            play sound "entity.player.levelup" with volume 10 with pitch 2 to player
            set {Shadow.ability.set::%player's uuid%} to true
            set {shadowselected::%player's uuid%} to 1



on player move:
    if {mark::%player's uuid%} is not set:
        set {mark::%player's uuid%} to 1
    if {mark::%player's uuid%} is 7:
        set {Shadow.ability.set::%player's uuid%} to true
    if {mark::%player's uuid%} is 8:
        set {time.ability.set::%player's uuid%} to true
        set {Shadow.ability.set::%player's uuid%} to true

command /cooldown:
    permission: op
    trigger:
        set {shadow.swap.cooldown::%player's uuid%} to 1
        set {shadow.step.cooldown::%player's uuid%} to 1
        set {time.heal.cooldown::%player's uuid%} to 1


every 1 second:
    loop all players:
        if {mark::%loop-player's uuid%} is -4:
            execute console command "/kick %loop-player% &4&lDeathBan &4&lAsk Someone To Craft &d&lRevival item"



command /revive [<Offlineplayer>]:
    trigger:
        if player's held item's lore contains "&b&lUse /revive <bannedplayer> to &5&lRevive":
            set {mark::%arg-1%} to 1
            broadcast "&b&l%arg-1% &fHas Been Revived By &c&l%player%"
            remove 1 of {-mak.revive} from player's inventory
            loop all players:
                play sound "ui.toast.challenge_complete" with volume 20 with pitch 2 at loop-player